{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"$id": "http://github.com/Intel-bigdata/cloudtik/python/cloudtick/core/config-schema.json",
	"title": "CloudTik",
	"description": "CloudTik cluster config schema",
	"type": "object",
	"definitions": {
        "commands": {
            "type": "array",
            "items": {
                "type": "string",
                "description": "shell command"
            }
        },
        "service_selector": {
            "type": "object",
            "description": "Defines a series match conditions of services",
            "properties": {
                "services": {
                    "type": "array",
                    "description": "The services to discover. If not specified, match to all the services.",
                    "items": {
                        "type": "string"
                    }
                },
                "tags": {
                    "type": "array",
                    "description": "The tags to match for the services. All tags must match",
                    "items": {
                        "type": "string"
                    }
                },
                "labels": {
                    "type": "object",
                    "description": "The labels to match for the services. All labels must match",
                    "patternProperties": {
                        ".*":{
                            "type": "string"
                        }
                    }
                },
                "runtimes": {
                    "type": "array",
                    "description": "Services of any of the runtimes.",
                    "items": {
                        "type": "string"
                    }
                },
                "clusters": {
                    "type": "array",
                    "description": "Services of any of the clusters.",
                    "items": {
                        "type": "string"
                    }
                },
                "exclude_labels": {
                    "type": "object",
                    "description": "The labels to exclude for the services. Be excluded if include any these labels.",
                    "patternProperties": {
                        ".*":{
                            "type": "string"
                        }
                    }
                },
                "exclude_joined_labels": {
                    "type": "array",
                    "description": "A list of joined labels to exclude for the services.",
                    "items": {
                        "type": "object",
                        "description": "The labels to exclude for the services. All the labels must match to be excluded.",
                        "patternProperties": {
                            ".*":{
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "database_connect": {
            "type": "object",
            "description": "Database parameters for connect to an existing database.",
            "additionalProperties": true,
            "properties": {
                "engine": {
                    "type": "string",
                    "description": "Database engine: mysql or postgres."
                },
                "address": {
                    "type": "string",
                    "description": "Database server address"
                },
                "port": {
                    "type": "number",
                    "description": "Database server port. default: mysql=3306, postgres=5432"
                },
                "username": {
                    "type": "string",
                    "description": "Database administrator login name. default: cloudtik"
                },
                "password": {
                    "type": "string",
                    "description": "Database administrator login password."
                }
            }
        }
    },
    "required": [
        "cluster_name",
        "provider"
    ],
    "additionalProperties": true,
    "properties": {
        "cluster_name": {
            "description": "A unique identifier for the head node and workers of this cluster.",
            "type": "string"
        },
        "workspace_name": {
            "description": "The workspace resource for this cluster.",
            "type": "string"
        },
        "from": {
            "description": "Inherit configurations from another configuration in templates folder.",
            "type": "string"
        },
        "min_workers": {
            "description": "The minimum number of worker nodes to launch. Use the per node_type min_workers field instead.",
            "type": "integer",
            "minimum": 0
        },
        "max_workers": {
            "description": "The maximum number of workers nodes to launch in addition to the head node. This takes precedence over min_workers.",
            "type": "integer",
            "minimum": 0
        },
        "upscaling_speed": {
            "description": "The scaler will scale up the cluster faster with higher upscaling speed. E.g., if the task requires adding more nodes then scaler will gradually scale up the cluster in chunks of upscaling_speed*currently_running_nodes. This number should be > 0.",
            "type": "number",
            "minimum": 0
        },
        "idle_timeout_minutes": {
            "description": "If a node is idle for this many minutes, it will be removed.",
            "type": "number",
            "minimum": 0
        },
        "cloudtik_wheel_url": {
            "type": "string",
            "description": "The CloudTik wheel URL from which to download and install when needed"
        },
        "disable_node_seq_id": {
            "type": "boolean",
            "description": "Whether disable the feature of assigning node sequence id to each node",
            "default": false
        },
        "retry_setup_command": {
            "type": "boolean",
            "description": "Whether to retry setup command if the command failed",
            "default": true
        },
        "retry_start_command": {
            "type": "boolean",
            "description": "Whether to retry start command if the command failed",
            "default": true
        },
        "number_of_retries": {
            "type": "integer",
            "description": "The number of reties if the command failed"
        },
        "retry_interval": {
            "type": "integer",
            "description": "The time interval in seconds for command retry"
        },
        "provider": {
            "type": "object",
            "description": "Cloud-provider specific configuration.",
            "required": [ "type" ],
            "additionalProperties": true,
            "properties": {
                "type": {
                    "type": "string",
                    "description": "e.g. aws, azure, gcp, huaweicloud,..."
                },
                "region": { 
                    "type": "string",
                    "description": "e.g. us-east-1"
                },
                "module": {
                    "type": "string",
                    "description": "module, if using external node provider"
                },
                "use_internal_ips": {
                    "type": "boolean",
                    "description": "don't require public ips"
                },
                "use_working_vpc": {
                    "type": "boolean",
                    "description": "When use_internal_ips is true, whether to use the working client vpc."
                },
                "peering_firewall_allow_working_subnet": {
                    "type": "boolean",
                    "description": "Whether automatically allow working node subnet access to peering network in firewall rules.",
                    "default": true
                },
                "peering_firewall_allow_ssh_only": {
                    "type": "boolean",
                    "description": "Whether allow only the ssh access to peering network in the above firewall rules.",
                    "default": true
                },
                "namespace": {
                    "type": "string",
                    "description": "k8s namespace, if using k8s"
                },
                "location": {
                    "type": "string",
                    "description": "Azure location"
                },
                "resource_group": {
                    "type": "string",
                    "description": "Azure resource group"
                },
                "tags": {
                    "type": "object",
                    "description": "Azure user-defined tags"
                },
                "subscription_id": {
                    "type": "string",
                    "description": "Azure subscription id"
                },
                "msi_identity_id": {
                    "type": "string",
                    "description": "User-defined managed identity (generated by config)"
                },
                "msi_identity_principal_id": {
                    "type": "string",
                    "description": "User-defined managed identity principal id (generated by config)"
                },
                "subnet_id": {
                    "type": "string",
                    "description": "Network subnet id"
                },
                "head_service_account": {
                    "type": "object",
                    "description": "k8s cluster head and controller permissions, if using k8s"
                },
                "head_role": {
                    "type": "object",
                    "description": "k8s cluster head and controller permissions, if using k8s"
                },
                "head_role_binding": {
                    "type": "object",
                    "description": "k8s cluster head and controller permissions, if using k8s"
                },
                "worker_service_account": {
                    "type": "object",
                    "description": "k8s cluster worker permissions, if using k8s"
                },
                "cloud_provider": {
                    "type": "object",
                    "description": "k8s cluster configurations for cloud provider integration.",
                    "required": [ "type" ],
                    "additionalProperties": true,
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "e.g. aws, azure, gcp, huaweicloud,..."
                        },
                        "region": {
                            "type": "string",
                            "description": "e.g. us-east-1"
                        }
                    }
                },
                "cache_stopped_nodes": {
                    "type": "boolean",
                    "description": "Whether to try to reuse previously stopped nodes instead of launching nodes. This will also cause the cluster scaler to stop nodes instead of terminating them. Only implemented for AWS."
                },
                "prefer_spot_node": {
                    "type": "boolean",
                    "description": "Whether to prefer to launch Spot instance to save money at the cost of uncertain termination."
                },
                "availability_zone": {
                    "type": "string",
                    "description": "GCP availability zone"
                },
                "project_id": {
                    "type": ["string", "null"],
                    "description": "GCP globally unique project id"
                },
                "security_group": {
                    "type": "object",
                    "description": "AWS security group",
                    "additionalProperties": false,
                    "properties": {
                      "GroupName": {
                        "type": "string",
                        "description": "Security group name"
                      },
                      "IpPermissions": {
                        "type": "array",
                        "description": "Security group in bound rules"
                      }
                    }
                },
                "disable_node_updaters": {
                    "type": "boolean",
                    "description": "Disables node updaters if set to True. Default is False. (For Kubernetes operator usage.)"
                },
                "aws_credentials": {
                    "type": "object",
                    "description": "Credentials for authenticating with the AWS using boto3. If not specified, will use environment default.",
                    "additionalProperties": true,
                    "properties": {
                        "aws_access_key_id": {
                            "type": "string",
                            "description": "The access key to use when creating the client."
                        },
                        "aws_secret_access_key": {
                            "type": "string",
                            "description": "The secret key to use when creating the client."
                        },
                        "aws_session_token": {
                            "type": "string",
                            "description": "The session token to use when creating the client."
                        }
                    }
                },
                "gcp_credentials": {
                    "type": "object",
                    "description": "Credentials for authenticating with the GCP client. If not specified, will use environment default.",
                    "required": [ "type" ],
                    "additionalProperties": false,
                    "properties": {
                        "type": {
                            "type": "string",
                            "enum": ["oauth_token", "service_account"],
                            "description": "Credentials type: either temporary OAuth 2.0 token or permanent service account credentials blob."
                        },
                        "credentials": {
                            "type": "object",
                            "description": "OAuth token fields or service account credentials fields"
                        }
                    }
                },
                "azure_credentials": {
                    "type": "object",
                    "description": "Credentials for authenticating with the Azure Cloud. If not specified, will use environment default.",
                    "required": [ "type" ],
                    "additionalProperties": false,
                    "properties": {
                        "type": {
                            "type": "string",
                            "enum": ["ClientSecret", "ManagedIdentity"],
                            "description": "Credentials type for credentials information."
                        },
                        "credentials": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Credential fields based on different credential types.",
                            "properties": {
                                "client_id": {
                                    "type": "string",
                                    "description": "The client id field for ClientSecret or ManagedIdentity credential."
                                },
                                "tenant_id": {
                                    "type": "string",
                                    "description": "The tenant id field for ClientSecret credential."
                                },
                                "client_secret": {
                                    "type": "string",
                                    "description": "The client secret field for ClientSecret credential."
                                }
                            }
                        }
                    }
                },
                "aliyun_credentials": {
                    "type": "object",
                    "description": "Credentials for authenticating with the Aliyun. If not specified, will use environment default.",
                    "additionalProperties": true,
                    "properties": {
                        "aliyun_access_key_id": {
                            "type": "string",
                            "description": "The access key to use when creating the client."
                        },
                        "aliyun_access_key_secret": {
                            "type": "string",
                            "description": "The secret key to use when creating the client."
                        },
                        "aliyun_security_token": {
                            "type": "string",
                            "description": "The optional session token to use when creating the client."
                        }
                    }
                },
                "huaweicloud_credentials": {
                    "type": "object",
                    "description": "Credentials for authenticating with HUAWEI CLOUD. If not specified, will use environment default.",
                    "required": [ "huaweicloud_access_key", "huaweicloud_secret_key" ],
                    "additionalProperties": false,
                    "properties": {
                        "huaweicloud_access_key": {
                            "type": "string",
                            "description": "The access key to use when creating the client."
                        },
                        "huaweicloud_secret_key": {
                            "type": "string",
                            "description": "The secret key to use when creating the client."
                        }
                    }
                },
                "storage": {
                    "type": "object",
                    "description": "The cloud storage configurations",
                    "additionalProperties": true,
                    "properties": {
                        "gcp_cloud_storage": {
                            "type": "object",
                            "description": "use google cloud storage",
                            "additionalProperties": true,
                            "properties": {
                                "gcs.bucket": {
                                    "type": "string",
                                    "description": "gcp cloud storage bucket name"
                                },
                                "gcs.service.account.client.email": {
                                    "type": "string",
                                    "description": "gcp service account client email"
                                },
                                "gcs.service.account.private.key.id": {
                                    "type": "string",
                                    "description": "gcp service account private key id"
                                },
                                "gcs.service.account.private.key": {
                                    "type": "string",
                                    "description": "gcp service account private key"
                                }
                            }
                        },
                        "azure_cloud_storage": {
                            "type": "object",
                            "description": "Azure cloud storage configurations",
                            "additionalProperties": false,
                            "properties": {
                              "azure.storage.type": {
                                "type": "string",
                                "enum": ["blob", "datalake"],
                                "description": "Azure cloud storage type: blob (Azure Blob Storage) or datalake (Azure Data Lake Storage Gen 2)."
                              },
                              "azure.storage.account": {
                                "type": "string",
                                "description": "azure storage account name"
                              },
                              "azure.container": {
                                "type": "string",
                                "description": "azure container name"
                              },
                              "azure.account.key": {
                                "type": "string",
                                "description": "azure storage account access key"
                              }
                            }
                        },
                        "aws_s3_storage": {
                            "type": "object",
                            "description": "AWS S3 storage configurations",
                            "additionalProperties": false,
                            "properties": {
                              "s3.bucket": {
                                "type": "string",
                                "description": "the s3 bucket name"
                              },
                              "s3.access.key.id": {
                                "type": "string",
                                "description": "access key id of s3"
                              },
                              "s3.secret.access.key": {
                                "type": "string",
                                "description": "secret access key of s3"
                              }
                            }
                        },
                        "aliyun_oss_storage": {
                            "type": "object",
                            "description": "Aliyun OSS storage configurations",
                            "additionalProperties": false,
                            "properties": {
                              "oss.bucket": {
                                "type": "string",
                                "description": "the OSS bucket name"
                              },
                              "oss.access.key.id": {
                                "type": "string",
                                "description": "access key id of accessing OSS"
                              },
                              "oss.access.key.secret": {
                                "type": "string",
                                "description": "access key secret of accessing OSS"
                              }
                            }
                        },
                        "huaweicloud_obs_storage": {
                            "type": "object",
                            "description": "Huawei Cloud OBS storage configurations",
                            "additionalProperties": false,
                            "properties": {
                              "obs.bucket": {
                                "type": "string",
                                "description": "the OBS bucket name"
                              },
                              "obs.access.key": {
                                "type": "string",
                                "description": "access key id of accessing OBS"
                              },
                              "obs.secret.key": {
                                "type": "string",
                                "description": "secret key of accessing OBS"
                              }
                            }
                        }
                    }
                },
                "database": {
                    "type": "object",
                    "description": "Managed cloud database options",
                    "additionalProperties": true,
                    "properties": {
                        "aws.database": {
                            "type": "object",
                            "description": "AWS RDS for MySQL options",
                            "additionalProperties": true,
                            "properties": {
                                "engine": {
                                    "type": "string",
                                    "description": "AWS RDS engine: mysql or postgres. default: mysql"
                                },
                                "address": {
                                    "type": "string",
                                    "description": "AWS RDS server address"
                                },
                                "port": {
                                    "type": "number",
                                    "description": "AWS RDS server port. default: mysql=3306, postgres=5432"
                                },
                                "username": {
                                    "type": "string",
                                    "description": "AWS RDS MasterUserPassword. default: cloudtik"
                                },
                                "password": {
                                    "type": "string",
                                    "description": "AWS RDS MasterUserPassword."
                                }
                            }
                        },
                        "azure.database": {
                            "type": "object",
                            "description": "Azure Database for MySQL options",
                            "additionalProperties": true,
                            "properties": {
                                "engine": {
                                    "type": "string",
                                    "description": "Azure Database engine: mysql or postgres. default: mysql"
                                },
                                "address": {
                                    "type": "string",
                                    "description": "Azure Database server address"
                                },
                                "port": {
                                    "type": "number",
                                    "description": "Azure Database server port. default: mysql=3306, postgres=5432"
                                },
                                "username": {
                                    "type": "string",
                                    "description": "Azure Database administrator login name. default: cloudtik"
                                },
                                "password": {
                                    "type": "string",
                                    "description": "Azure Database administrator login password."
                                }
                            }
                        },
                        "gcp.database": {
                            "type": "object",
                            "description": "GCP Cloud SQL for MySQL options",
                            "additionalProperties": true,
                            "properties": {
                                "engine": {
                                    "type": "string",
                                    "description": "GCP Cloud SQL engine: mysql or postgres. default: mysql"
                                },
                                "address": {
                                    "type": "string",
                                    "description": "GCP Cloud SQL server address"
                                },
                                "port": {
                                    "type": "number",
                                    "description": "GCP Cloud SQL server port. default: mysql=3306, postgres=5432"
                                },
                                "username": {
                                    "type": "string",
                                    "description": "GCP Cloud SQL user name. default: root"
                                },
                                "password": {
                                    "type": "string",
                                    "description": "GCP Cloud SQL password."
                                }
                            }
                        }
                    }
                },
                "verify_cloud_storage": {
                    "type": "boolean",
                    "description": "Whether to verify the cloud storage configurations.",
                    "default": true
                },
                "use_managed_cloud_storage": {
                    "type": "boolean",
                    "description": "Whether to use managed cloud storage of workspace.",
                    "default": true
                },
                "worker_role_for_cloud_storage": {
                    "type": "boolean",
                    "description": "Whether to assign worker with the role to access cloud storage.",
                    "default": true
                },
                "use_managed_cloud_database": {
                    "type": "boolean",
                    "description": "Whether to use managed cloud database of workspace.",
                    "default": false
                },
                "public_ip_bandwidth": {
                    "type": "integer",
                    "description": "Bandwidth of public ip in MB for node.",
                    "default": 20
                },
                "nodes": {
                    "type": "array",
                    "description": "The list of nodes for local provider.",
                    "items": {
                        "type": "object",
                        "required": [
                            "ip"
                        ],
                        "properties": {
                            "ip": {
                                "type": "string",
                                "description": "The ip address of the node as node identifier."
                            },
                            "instance_type": {
                                "type": "string",
                                "description": "The optional instance type name defined in the instance types list."
                            }
                        }
                    }
                },
                "instance_types": {
                    "type": "object",
                    "description": "Instance type definitions specifying the resources of the type.",
                    "patternProperties": {
                        ".*": {
                            "type": "object",
                            "additionalProperties": true,
                            "properties": {
                                "CPU": {"type": "integer"},
                                "GPU": {"type": "integer"},
                                "memory": {"type": "integer"}
                            }
                        }
                    },
                    "additionalProperties": false
                },
                "cloud_simulator_address": {
                    "type": "string",
                    "description": "The cloud simulator address in the format of address:port for on-premise provider."
                },
                "port_mapping_base": {
                    "type": "integer",
                    "description": "The port mapping shift to avoid port conflicts with host for virtual provider."
                }
            }
        },
        "auth": {
            "type": "object",
            "description": "How will authenticate with newly launched nodes.",
            "additionalProperties": false,
            "properties": {
                "ssh_user": {
                    "type": "string",
                    "default": "ubuntu"
                },
                "ssh_port": {
                    "type": "string",
                    "default": "Except that kubernetes is 9999, all others are 22"
                },
                "ssh_public_key": { 
                    "type": "string"
                },
                "ssh_private_key": { 
                    "type": "string"
                },
                "ssh_proxy_command": {
                    "description": "A value for ProxyCommand ssh option, for connecting through proxies. Example: nc -x proxy.example.com:1234 %h %p",
                    "type": "string"
                }
            }
        },
        "docker": {
            "type": "object",
            "description": "Docker configuration. If this is specified, all setup and start commands will be executed in the container.",
            "additionalProperties": true,
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether to run everything in docker container",
                    "default": false
                },
                "image": {
                    "type": "string",
                    "description": "the docker image name. If there is no tag specified, will use current CloudTik version as tag.",
                    "default": "cloudtik/spark-runtime"
                },
                "container_name": {
                    "type": "string",
                    "default": "cloudtik_spark_container"
                },
                "pull_before_run": {
                    "type": "boolean",
                    "description": "run `docker pull` first"
                },
                "run_options": {
                    "type": "array",
                    "description": "shared options for starting head/worker docker"
                },
                "head_image": {
                    "type": "string",
                    "description": "image for head node, takes precedence over 'image' if specified"
                },
                "head_run_options": {
                    "type": "array",
                    "description": "head specific run options, appended to run_options"
                },
                "worker_image": {
                    "type": "string",
                    "description": "analogous to head_image"
                },
                "worker_run_options": {
                    "type": "array",
                    "description": "analogous to head_run_options"
                }, 
                "disable_automatic_runtime_detection" : {
                    "type": "boolean",
                    "description": "disable automatically using the NVIDIA runtime if available",
                    "default": false
                },
                "disable_head_automatic_runtime_detection" : {
                    "type": "boolean",
                    "description": "disable automatically using the NVIDIA runtime if available for head",
                    "default": true
                },
                "disable_shm_size_detection" : {
                    "type": "boolean",
                    "description": "disable automatically detecting /dev/shm size for the container",
                    "default": false
                },
                "use_podman"  :  {
                    "type": "boolean",
                    "description": "Use 'podman' command in place of 'docker'",
                    "default": false
                },
                "initialization_commands": {
                    "$ref": "#/definitions/commands",
                    "description": "List of commands that will be run before `setup_commands` on host for docker only"
                },
                "head_initialization_commands": {
                    "$ref": "#/definitions/commands",
                    "description": "List of commands that will be run before `setup_commands` on host for docker only"
                },
                "worker_initialization_commands": {
                    "$ref": "#/definitions/commands",
                    "description": "List of commands that will be run before `setup_commands` on host for docker only"
                }
            }
        },
        "head_node_type": {
            "type": "string",
            "description": "If using multiple node types, specifies the head node type."
        },
        "head_node": {
            "type": "object",
            "description": "Provider-specific config for the head node, e.g. instance type."
        },
        "file_mounts": {
            "type": "object",
            "description": "Map of remote paths to local paths, e.g. {\"/tmp/data\": \"/my/local/data\"}"
        },
        "cluster_synced_files": {
            "type": "array",
            "description": "List of paths on the head node which should sync to the worker nodes, e.g. [\"/some/data/somehwere\"]"
        },
        "file_mounts_sync_continuously": {
            "type": "boolean",
            "description": "If enabled, file mounts will sync continously between the head node and the worker nodes. The nodes will not re-run setup commands if only the contents of the file mounts folders change."
        },
        "rsync_exclude": {
            "type": "array",
            "description": "File pattern to not sync up or down when using the rsync command. Matches the format of rsync's --exclude param."
        },
        "rsync_filter": {
            "type": "array",
            "description": "Pattern files to lookup patterns to exclude when using rsync up or rsync down. This file is checked for recursively in all directories. For example, if .gitignore is provided here, the behavior will match git's .gitignore behavior."
        },
        "metadata": {
            "type": "object",
            "description": "Metadata field that can be used to store user-defined data in the cluster config. We do not interpret these fields."
        },
        "initialization_commands": {
            "$ref": "#/definitions/commands",
            "description": "List of commands that will be run before `setup_commands`. If docker is enabled, these commands will run outside the container and before docker is setup."
        },
        "head_initialization_commands": {
            "$ref": "#/definitions/commands",
            "description": "List of commands that will be run before `setup_commands`. If docker is enabled, these commands will run outside the container and before docker is setup."
        },
        "worker_initialization_commands": {
            "$ref": "#/definitions/commands",
            "description": "List of commands that will be run before `setup_commands`. If docker is enabled, these commands will run outside the container and before docker is setup."
        },
        "setup_commands": {
            "$ref": "#/definitions/commands",
            "description": "List of common commands to run to setup nodes."
        },
        "head_setup_commands": {
            "$ref": "#/definitions/commands",
            "description": "Commands that will be run on the head node after common setup."
        },
        "worker_setup_commands": {
            "$ref": "#/definitions/commands",
            "description": "Commands that will be run on worker nodes after common setup."
        },
        "bootstrap_commands": {
            "$ref": "#/definitions/commands",
            "description": "Common setup commands running after all the setup commands."
        },
        "start_commands": {
            "$ref": "#/definitions/commands",
            "description": "Common start commands for nodes."
        },
        "head_start_commands": {
            "$ref": "#/definitions/commands",
            "description": "Command to start on the head node."
        },
        "worker_start_commands": {
            "$ref": "#/definitions/commands",
            "description": "Command to start on worker nodes."
        },
        "stop_commands": {
            "$ref": "#/definitions/commands",
            "description": "Common stop commands for nodes."
        },
        "head_stop_commands": {
            "$ref": "#/definitions/commands",
            "description": "Command to stop on the head node."
        },
        "worker_stop_commands": {
            "$ref": "#/definitions/commands",
            "description": "Command to stop on worker nodes."
        },
        "no_restart": {
            "description": "Whether to avoid restarting the cluster during updates. This field is controlled by the cloudtik --no-restart flag and cannot be set by the user."
        },
        "merged_commands": {
            "type": "object",
            "description": "The merged commands used internally. Don't override."
        },
        "no_controller_on_head": {
            "type": "boolean",
            "description": "Whether need to run controller on head. Internal flag, don't override."
        },
        "available_node_types": {
            "type": "object",
            "description": "A list of node types for multi-node-type autoscaling.",
            "patternProperties": {
                ".*": {
                    "type": "object",
                    "required": [ "node_config" ],
                    "additionalProperties": false,
                    "properties": {
                        "node_config": {
                            "type": "object",
                            "description": "Provider-specific config for the node, e.g. instance type."
                        },
                        "min_workers": {"type": "integer"},
                        "max_workers": {"type": "integer"},
                        "resources": {
                            "type": "object",
                            "patternProperties": {
                                ".*":{
                                    "type": "integer",
                                    "minimum": 0
                                }
                            }
                        },
                        "worker_initialization_commands": {
                            "$ref": "#/definitions/commands",
                            "description": "List of commands that will be run before `setup_commands`. If docker is enabled, these commands will run outside the container and before docker is setup."
                        },
                        "worker_setup_commands": {
                            "$ref": "#/definitions/commands",
                            "description": "List of common commands to run to setup on this specific node type."
                        },
                        "bootstrap_commands": {
                            "$ref": "#/definitions/commands",
                            "description": "Common setup commands running after all the setup commands on this specific node type."
                        },
                        "worker_start_commands": {
                            "$ref": "#/definitions/commands",
                            "description": "Command to start on this specific node type."
                        },
                        "worker_stop_commands": {
                            "$ref": "#/definitions/commands",
                            "description": "Command to stop on this specific node type."
                        },
                        "merged_commands": {
                            "type": "object",
                            "description": "The merged commands used internally. Don't override."
                        },
                        "runtime": {
                            "type": "object",
                            "description": "Set the configurations for runtime components",
                            "additionalProperties": true,
                            "properties": {
                                "types": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "The list of runtimes to enable for this cluster"
                                },
                                "envs": {
                                    "type": "object",
                                    "patternProperties": {
                                        ".*":{
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "docker": {
                            "description": "Configuration of Worker nodes.",
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                                "pull_before_run": {
                                    "type": "boolean",
                                    "description": "run `docker pull` first"
                                },
                                "worker_image": {
                                    "type": "string",
                                    "description": "analogous to head_image"
                                },
                                "worker_run_options": {
                                    "type": "array",
                                    "description": "analogous to head_run_options, merged with the global docker run_options."
                                }
                            }
                        }
                    }
                }
            },
            "additionalProperties": false
        },
        "runtime": {
            "type": "object",
            "description": "Set the configurations for runtime components",
            "additionalProperties": true,
            "properties": {
                "types": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of runtimes to enable for this cluster"
                },
                "envs": {
                    "type": "object",
                    "patternProperties": {
                        ".*":{
                            "type": "string"
                        }
                    }
                },
                "scaling:": {
                    "type": "object",
                    "description": "User scaling configurations",
                    "additionalProperties": true,
                    "properties": {
                        "scaling_policy": {
                            "type": "string",
                            "description": "The built-in scaling policy name to use. Values: scaling-with-load, scaling-with-time"
                        },
                        "scaling_step": {
                            "type": "integer",
                            "default": 1,
                            "description": "The number of nodes for each scale up step."
                        },
                        "scaling_resource": {
                            "type": "string",
                            "default": "CPU",
                            "description": "The resource type to check for scale: CPU or memory"
                        },
                        "cpu_load_threshold": {
                            "type": "number",
                            "default": 0.85,
                            "description": "The cpu load threshold to start scale"
                        },
                        "memory_load_threshold": {
                            "type": "number",
                            "default": 0.85,
                            "description": "The memory load threshold to start scale"
                        },
                        "in_use_cpu_load_threshold": {
                            "type": "number",
                            "default": 0.10,
                            "description": "The minimum cpu load to consider the machine is in use"
                        },
                        "scaling_periodic": {
                            "type": "string",
                            "default": "daily",
                            "description": "The periodic to use for scaling with time policy. Values: daily, weekly, monthly"
                        },
                        "scaling_math_base": {
                            "type": "string",
                            "default": "on-min-workers",
                            "description": "The base number to use for arithmetic such as *2. Values: on-min-workers, on-previous-time"
                        },
                        "scaling_policy_class": {
                            "type": "string",
                            "description": "The module and class path of the scaling policy class"
                        }
                    }
                },
                "spark": {
                    "type": "object",
                    "description": "Spark runtime configurations",
                    "additionalProperties": true,
                    "properties": {
                        "config": {
                            "type": "object",
                            "description": "Map of spark configurations, e.g. {\"spark.executor.cores\": \"45\"}"
                        },
                        "scaling:": {
                            "type": "object",
                            "description": "Spark scaling configurations",
                            "additionalProperties": true,
                            "properties": {
                                "scaling_mode": {
                                    "type": "string",
                                    "description": "The Spark scaling mode. Values: apps-pending, aggressive"
                                },
                                "scaling_step": {
                                    "type": "integer",
                                    "default": 1,
                                    "description": "The number of nodes for each scale up step."
                                },
                                "scaling_resource": {
                                    "type": "string",
                                    "default": "memory",
                                    "description": "The resource type to check for scale: CPU or memory"
                                },
                                "apps_pending_threshold": {
                                    "type": "integer",
                                    "default": 1,
                                    "description": "The number of pending apps threshold to trigger scaling."
                                },
                                "apps_pending_free_cores_threshold": {
                                    "type": "integer",
                                    "default": 4,
                                    "description": "The number of free cores threshold below which to trigger scaling."
                                },
                                "apps_pending_free_memory_threshold": {
                                    "type": "integer",
                                    "default": 1024,
                                    "description": "The size of free memory threshold in MB below which to trigger scaling."
                                },
                                "aggressive_free_ratio_threshold": {
                                    "type": "number",
                                    "default": 0.1,
                                    "description": "The free cpu or memory ratio below which to trigger scaling for aggressive mode."
                                }
                            }
                        },
                        "hadoop_default_cluster": {
                            "type": "boolean",
                            "description": "Whether to set Hadoop default to cluster storage if available.",
                            "default": false
                        },
                        "hdfs_service_discovery": {
                            "type": "boolean",
                            "description": "Whether to discover and use HDFS service in the same workspace.",
                            "default": false
                        },
                        "hdfs_service_selector": {
                            "$ref": "#/definitions/service_selector",
                            "description": "The selector for HDFS service if service discovery is enabled."
                        },
                        "hdfs_namenode_uri": {
                            "type": "string",
                            "description": "HDFS service endpoint if Spark need to access HDFS."
                        },
                        "hdfs_mount_method": {
                            "type": "string",
                            "description": "HDFS mount method: nfs or fuse. Default fuse if not specified."
                        },
                        "metastore_service_discovery": {
                            "type": "boolean",
                            "description": "Whether to discover and use metastore service in the same workspace.",
                            "default": true
                        },
                        "metastore_service_selector": {
                            "$ref": "#/definitions/service_selector",
                            "description": "The selector for Metastore service if service discovery is enabled."
                        },
                        "hive_metastore_uri": {
                            "type": "string",
                            "description": "Metastore service endpoint for Spark to use."
                        },
                        "yarn_resource_memory_ratio": {
                            "type": "number",
                            "description": "The yarn node virtual memory ratio vs the available physical memory."
                        },
                        "yarn_scheduler": {
                            "type": "string",
                            "description": "The yarn scheduler to use: capacity or fair"
                        }
                    }
                },
                "ai": {
                    "type": "object",
                    "description": "AI runtime configurations",
                    "additionalProperties": true,
                    "properties": {
                        "with_oneapi": {
                            "type": "boolean",
                            "description": "Whether to use oneAPI frameworks and libraries for AI"
                        },
                        "with_intel_mpi": {
                            "type": "boolean",
                            "description": "Whether to use Intel MPI. If with_oneapi is set, this is default true"
                        },
                        "with_oneccl": {
                            "type": "boolean",
                            "description": "Whether to use oneCCL. If with_oneapi is set, this is default true"
                        },
                        "with_intel_pytorch": {
                            "type": "boolean",
                            "description": "Whether to use Intel Optimizations of PyTorch. If with_oneapi is set, this is default true"
                        },
                        "with_gpu": {
                            "type": "boolean",
                            "description": "Whether to use GPU frameworks and libraries for AI"
                        },
                        "database": {
                            "$ref": "#/definitions/database_connect",
                            "description": "The database parameters. Engine, address, port are optional if using service discovery."
                        },
                        "database_service_discovery": {
                            "type": "boolean",
                            "description": "Whether to discover and use database service in the same workspace.",
                            "default": true
                        },
                        "database_service_selector": {
                            "$ref": "#/definitions/service_selector",
                            "description": "The selector for database service if service discovery is enabled."
                        }
                    }
                },
                "ray": {
                    "type": "object",
                    "description": "Ray runtime configurations",
                    "additionalProperties": true,
                    "properties": {
                        "scaling:": {
                            "type": "object",
                            "description": "Ray scaling configurations",
                            "additionalProperties": true,
                            "properties": {
                                "auto_scaling": {
                                    "type": "boolean",
                                    "default": false,
                                    "description": "Whether to enable ray based auto scaling"
                                }
                            }
                        }
                    }
                },
                "flink": {
                    "type": "object",
                    "description": "Flink runtime configurations",
                    "additionalProperties": true,
                    "properties": {
                        "config": {
                            "type": "object",
                            "description": "Map of flink configurations"
                        },
                        "scaling:": {
                            "type": "object",
                            "description": "Flink scaling configurations",
                            "additionalProperties": true,
                            "properties": {
                                "scaling_mode": {
                                    "type": "string",
                                    "description": "The scaling mode. Values: apps-pending, aggressive"
                                },
                                "scaling_step": {
                                    "type": "integer",
                                    "default": 1,
                                    "description": "The number of nodes for each scale up step."
                                },
                                "scaling_resource": {
                                    "type": "string",
                                    "default": "memory",
                                    "description": "The resource type to check for scale: CPU or memory"
                                },
                                "apps_pending_threshold": {
                                    "type": "integer",
                                    "default": 1,
                                    "description": "The number of pending apps threshold to trigger scaling."
                                },
                                "apps_pending_free_cores_threshold": {
                                    "type": "integer",
                                    "default": 4,
                                    "description": "The number of free cores threshold below which to trigger scaling."
                                },
                                "apps_pending_free_memory_threshold": {
                                    "type": "integer",
                                    "default": 1024,
                                    "description": "The size of free memory threshold in MB below which to trigger scaling."
                                },
                                "aggressive_free_ratio_threshold": {
                                    "type": "number",
                                    "default": 0.1,
                                    "description": "The free cpu or memory ratio below which to trigger scaling for aggressive mode."
                                }
                            }
                        },
                        "hadoop_default_cluster": {
                            "type": "boolean",
                            "description": "Whether to set Hadoop default to cluster storage if available.",
                            "default": false
                        },
                        "hdfs_service_discovery": {
                            "type": "boolean",
                            "description": "Whether to discover and use HDFS service in the same workspace.",
                            "default": false
                        },
                        "hdfs_namenode_uri": {
                            "type": "string",
                            "description": "HDFS service endpoint if Flink need to access HDFS."
                        },
                        "metastore_service_discovery": {
                            "type": "boolean",
                            "description": "Whether to discover and use metastore service in the same workspace.",
                            "default": true
                        },
                        "hive_metastore_uri": {
                            "type": "string",
                            "description": "Metastore service endpoint for Flink to use."
                        },
                        "yarn_resource_memory_ratio": {
                            "type": "number",
                            "description": "The yarn node virtual memory ratio vs the available physical memory."
                        },
                        "yarn_scheduler": {
                            "type": "string",
                            "description": "The yarn scheduler to use: capacity or fair"
                        }
                    }
                },
                "metastore": {
                    "type": "object",
                    "description": "Metastore runtime configurations",
                    "additionalProperties": true,
                    "properties": {
                        "database": {
                            "$ref": "#/definitions/database_connect",
                            "description": "The database parameters. Engine, address, port are optional if using service discovery."
                        },
                        "database_service_discovery": {
                            "type": "boolean",
                            "description": "Whether to discover and use database service in the same workspace.",
                            "default": true
                        },
                        "database_service_selector": {
                            "$ref": "#/definitions/service_selector",
                            "description": "The selector for database service if service discovery is enabled."
                        }
                    }
                },
                "kafka": {
                    "type": "object",
                    "description": "Kafka runtime configurations",
                    "additionalProperties": true,
                    "properties": {
                        "config": {
                            "type": "object",
                            "description": "Map of Kafka server properties."
                        },
                        "zookeeper_connect": {
                            "type": "string",
                            "description": "Zookeeper servers to use for Kafka."
                        },
                        "zookeeper_service_discovery": {
                            "type": "boolean",
                            "description": "Whether to discover and use zookeeper service in the same workspace.",
                            "default": true
                        },
                        "zookeeper_service_selector": {
                            "$ref": "#/definitions/service_selector",
                            "description": "The selector for Zookeeper service if service discovery is enabled."
                        }
                    }
                },
                "zookeeper": {
                    "type": "object",
                    "description": "Zookeeper runtime configurations",
                    "additionalProperties": true,
                    "properties": {
                        "config": {
                            "type": "object",
                            "description": "Map of Zookeeper server properties."
                        }
                    }
                },
                "presto": {
                    "type": "object",
                    "description": "Presto runtime configurations",
                    "additionalProperties": true,
                    "properties": {
                        "config": {
                            "type": "object",
                            "description": "Map of Presto server properties."
                        },
                        "catalogs": {
                            "type": "object",
                            "description": "Presto catalogs to be configured."
                        },
                        "metastore_service_discovery": {
                            "type": "boolean",
                            "description": "Whether to discover and use metastore service in the same workspace.",
                            "default": true
                        },
                        "metastore_service_selector": {
                            "$ref": "#/definitions/service_selector",
                            "description": "The selector for Metastore service if service discovery is enabled."
                        },
                        "hive_metastore_uri": {
                            "type": "string",
                            "description": "Explicit Metastore service endpoint for Presto to use."
                        }
                    }
                },
                "trino": {
                    "type": "object",
                    "description": "Trino runtime configurations",
                    "additionalProperties": true,
                    "properties": {
                        "catalogs": {
                            "type": "object",
                            "description": "Trino catalogs to be configured."
                        },
                        "metastore_service_discovery": {
                            "type": "boolean",
                            "description": "Whether to discover and use metastore service in the same workspace.",
                            "default": true
                        },
                        "metastore_service_selector": {
                            "$ref": "#/definitions/service_selector",
                            "description": "The selector for Metastore service if service discovery is enabled."
                        },
                        "hive_metastore_uri": {
                            "type": "string",
                            "description": "Explicit Metastore service endpoint for Trino to use."
                        }
                    }
                },
                "sshserver": {
                    "type": "object",
                    "description": "SSH Server runtime configurations",
                    "additionalProperties": true,
                    "properties": {
                        "port": {
                            "type": "integer",
                            "default": 22022,
                            "description": "The SSH Server port."
                        }
                    }
                },
                "consul": {
                    "type": "object",
                    "description": "Consul runtime configurations",
                    "additionalProperties": true,
                    "properties": {
                        "server": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether the cluster with Consul runs with Consul server or client agent."
                        },
                        "data_center": {
                            "type": "string",
                            "description": "Override Consul data center name. By default is the workspace name."
                        }
                    }
                },
                "prometheus": {
                    "type": "object",
                    "description": "Prometheus runtime configurations",
                    "additionalProperties": true,
                    "properties": {
                        "port": {
                            "type": "integer",
                            "default": 9090,
                            "description": "Prometheus server port."
                        },
                        "high_availability": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to run a server on each node for high availability. Each server will scrape the same set of targets"
                        },
                        "scrape_scope": {
                            "type": "string",
                            "default": "local",
                            "description": "The scrape scope for this server: local, workspace or federation."
                        },
                        "scrape_services": {
                            "$ref": "#/definitions/service_selector",
                            "description": "The selector for services to scrape."
                        },
                        "federation_targets": {
                            "type": "array",
                            "description": "The Prometheus targets for federation to use if no service discovery deployed",
                            "items": {
                                "type": "object",
                                "required": [
                                    "targets"
                                ],
                                "properties": {
                                    "targets": {
                                        "type": "array",
                                        "description": "The list of targets."
                                    },
                                    "labels": {
                                        "type": "object",
                                        "description": "The optional labels to add for the targets",
                                        "patternProperties": {
                                            ".*":{
                                                "type": "string"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                "node_exporter": {
                    "type": "object",
                    "description": "Prometheus node exporter runtime configurations",
                    "additionalProperties": true,
                    "properties": {
                        "port": {
                            "type": "integer",
                            "default": 9100,
                            "description": "Prometheus node exporter port."
                        }
                    }
                },
                "grafana": {
                    "type": "object",
                    "description": "Grafana runtime configurations",
                    "additionalProperties": true,
                    "properties": {
                        "port": {
                            "type": "integer",
                            "default": 3000,
                            "description": "Grafana server port."
                        },
                        "high_availability": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to run a server on each node for high availability."
                        },
                        "data_sources_scope": {
                            "type": "string",
                            "default": "local",
                            "description": "The data sources scope from which to configure this server: local or workspace."
                        },
                        "data_sources": {
                            "type": "array",
                            "description": "Array of static data sources to be configured.",
                            "items": {
                                "type": "object",
                                "description": "Grafana data source definition."
                            }
                        },
                        "data_sources_services": {
                            "$ref": "#/definitions/service_selector",
                            "description": "The selector for workspace services as data sources."
                        }
                    }
                },
                "haproxy": {
                    "type": "object",
                    "description": "HAProxy runtime configurations",
                    "additionalProperties": true,
                    "properties": {
                        "port": {
                            "type": "integer",
                            "default": 80,
                            "description": "The frontend server port."
                        },
                        "protocol": {
                            "type": "string",
                            "default": "tcp",
                            "description": "The frontend protocol: tcp or http."
                        },
                        "app_mode": {
                            "type": "string",
                            "default": "load-balancer",
                            "description": "The application mode: load-balancer or api-gateway."
                        },
                        "high_availability": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to run a server on each node for high availability."
                        },
                        "backend": {
                            "type": "object",
                            "description": "Backend configurations",
                            "properties": {
                                "config_mode": {
                                    "type": "string",
                                    "default": "dynamic",
                                    "description": "How the backend is configured: dns, static, dynamic"
                                },
                                "balance": {
                                    "type": "string",
                                    "default": "roundrobin",
                                    "description": "The backend balance algorithm and arguments: roundrobin, leastconn, first, random, hash and so."
                                },
                                "max_servers": {
                                    "type": "integer",
                                    "default": 128,
                                    "description": "The max number of servers. This is needed only for HAProxy server template."
                                },
                                "selector": {
                                    "$ref": "#/definitions/service_selector",
                                    "description": "The selector for services for the backend."
                                },
                                "service_name": {
                                    "type": "string",
                                    "description": "The service name used for DNS discovery."
                                },
                                "service_tag": {
                                    "type": "string",
                                    "description": "The service tag used for DNS discovery."
                                },
                                "service_cluster": {
                                    "type": "string",
                                    "description": "The cluster of the service. Service tag and service cluster are exclusive."
                                },
                                "servers": {
                                    "type": "array",
                                    "description": "Array of static servers for the backend.",
                                    "items": {
                                        "type": "string",
                                        "description": "Server entry in format: host:port."
                                    }
                                },
                                "session_persistence": {
                                    "type": "string",
                                    "default": "none",
                                    "description": "The session persistence method: none, cookie or ip"
                                }
                            }
                        }
                    }
                },
                "nginx": {
                    "type": "object",
                    "description": "NGINX runtime configurations",
                    "additionalProperties": true,
                    "properties": {
                        "port": {
                            "type": "integer",
                            "default": 80,
                            "description": "The server listen port."
                        },
                        "app_mode": {
                            "type": "string",
                            "default": "load-balancer",
                            "description": "The application mode: web, load-balancer or api-gateway."
                        },
                        "high_availability": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to run a server on each node for high availability."
                        },
                        "backend": {
                            "type": "object",
                            "description": "Backend configurations",
                            "properties": {
                                "config_mode": {
                                    "type": "string",
                                    "default": "dns",
                                    "description": "How the backend is configured: dns, static, dynamic"
                                },
                                "balance": {
                                    "type": "string",
                                    "default": "round_robin",
                                    "description": "The backend balance algorithm and arguments: round_robin, least_conn, random, ip_hash or hash."
                                },
                                "selector": {
                                    "$ref": "#/definitions/service_selector",
                                    "description": "The selector for services for the backend."
                                },
                                "service_name": {
                                    "type": "string",
                                    "description": "The service name used for DNS discovery."
                                },
                                "service_port": {
                                    "type": "integer",
                                    "default": 80,
                                    "description": "The service port of the backend."
                                },
                                "service_tag": {
                                    "type": "string",
                                    "description": "The service tag used for DNS discovery."
                                },
                                "service_cluster": {
                                    "type": "string",
                                    "description": "The cluster of the service. Service tag and service cluster are exclusive."
                                },
                                "servers": {
                                    "type": "array",
                                    "description": "Array of static servers for the backend.",
                                    "items": {
                                        "type": "string",
                                        "description": "Server entry in format: host:port."
                                    }
                                }
                            }
                        }
                    }
                },
                "mysql": {
                    "type": "object",
                    "description": "MySQL runtime configurations",
                    "additionalProperties": true,
                    "properties": {
                        "port": {
                            "type": "integer",
                            "default": 3306,
                            "description": "The MySQL server port."
                        },
                        "high_availability": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to run a server on each node for high availability."
                        },
                        "root_password": {
                            "type": "string",
                            "default": "cloudtik",
                            "description": "Specify the root user password when initializing the MySQL instance."
                        },
                        "database": {
                            "type": "object",
                            "description": "Database configurations",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "The name of the database to create at the initializing process."
                                },
                                "user": {
                                    "type": "string",
                                    "description": "The user to create and grant access for the database at the initializing process"
                                },
                                "password": {
                                    "type": "string",
                                    "description": "The password for the user set at the initializing process."
                                }
                            }
                        }
                    }
                },
                "postgres": {
                    "type": "object",
                    "description": "Postgres runtime configurations",
                    "additionalProperties": true,
                    "properties": {
                        "port": {
                            "type": "integer",
                            "default": 5432,
                            "description": "Postgres server port."
                        },
                        "high_availability": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to run a server on each node for high availability."
                        },
                        "admin_user": {
                            "type": "string",
                            "default": "cloudtik",
                            "description": "Specify the admin username when initializing the MySQL instance."
                        },
                        "admin_password": {
                            "type": "string",
                            "default": "cloudtik",
                            "description": "Specify the admin password when initializing the MySQL instance."
                        },
                        "database": {
                            "type": "object",
                            "description": "Database configurations",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "Database to create at the initializing process."
                                },
                                "user": {
                                    "type": "string",
                                    "description": "The user to create and grant access for the database at the initializing process"
                                },
                                "password": {
                                    "type": "string",
                                    "description": "The password for the user set at the initializing process."
                                }
                            }
                        }
                    }
                },
                "dnsmasq": {
                    "type": "object",
                    "description": "Dnsmasq runtime configurations",
                    "additionalProperties": true,
                    "properties": {
                        "port": {
                            "type": "integer",
                            "default": 53,
                            "description": "DNS server port."
                        },
                        "default_resolver": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to set this DNS server as the system default resolver in /etc/resolv.conf."
                        }
                    }
                },
                "coredns": {
                    "type": "object",
                    "description": "CoreDNS runtime configurations",
                    "additionalProperties": true,
                    "properties": {
                        "port": {
                            "type": "integer",
                            "default": 53,
                            "description": "DNS server port."
                        },
                        "default_resolver": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to set this DNS server as the system default resolver in /etc/resolv.conf."
                        }
                    }
                },
                "bind": {
                    "type": "object",
                    "description": "Bind (Named) runtime configurations",
                    "additionalProperties": true,
                    "properties": {
                        "port": {
                            "type": "integer",
                            "default": 53,
                            "description": "DNS server port."
                        },
                        "dnssec_validation": {
                            "type": "string",
                            "default": "yes",
                            "description": "The DNSSEC validation setting: yes, auto, no."
                        },
                        "default_resolver": {
                            "type": "boolean",
                            "default": false,
                            "description": "Whether to set this DNS server as the system default resolver in /etc/resolv.conf."
                        }
                    }
                },
                "apisix": {
                    "type": "object",
                    "description": "APISIX runtime configurations",
                    "additionalProperties": true,
                    "properties": {
                        "port": {
                            "type": "integer",
                            "default": 9080,
                            "description": "APISIX server port."
                        },
                        "admin_port": {
                            "type": "integer",
                            "default": 9180,
                            "description": "APISIX admin port."
                        },
                        "etcd_service_discovery": {
                            "type": "boolean",
                            "description": "Whether to discover and use ETCD service in the same workspace.",
                            "default": true
                        },
                        "etcd_service_selector": {
                            "$ref": "#/definitions/service_selector",
                            "description": "The selector for Metastore service if service discovery is enabled."
                        },
                        "etcd_uri": {
                            "type": "string",
                            "description": "Explicit set ETCD service to use."
                        }
                    }
                },
                "kong": {
                    "type": "object",
                    "description": "Kong runtime configurations",
                    "additionalProperties": true,
                    "properties": {
                        "port": {
                            "type": "integer",
                            "default": 8000,
                            "description": "Kong service port."
                        },
                        "ssl_port": {
                            "type": "integer",
                            "default": 8443,
                            "description": "Kong service SSL port."
                        },
                        "database": {
                            "$ref": "#/definitions/database_connect",
                            "description": "The database parameters. Engine, address, port are optional if using service discovery."
                        },
                        "database_service_discovery": {
                            "type": "boolean",
                            "description": "Whether to discover and use database service in the same workspace.",
                            "default": true
                        },
                        "database_service_selector": {
                            "$ref": "#/definitions/service_selector",
                            "description": "The selector for database service if service discovery is enabled."
                        }
                    }
                }
            }
        }
    }
}

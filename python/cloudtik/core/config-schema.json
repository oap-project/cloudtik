{
	"$schema": "http://json-schema.org/draft-07/schema#",
	"$id": "http://github.com/Intel-bigdata/cloudtik/python/cloudtick/core/config-schema.json",
	"title": "CloudTik",
	"description": "CloudTik cluster config schema",
	"type": "object",
	"definitions": {
        "commands": {
            "type": "array",
            "items": {
                "type": "string",
                "description": "shell command"
            }
        }
    },
    "required": [
        "cluster_name",
        "provider"
    ],
    "additionalProperties": false,
    "properties": {
        "cluster_name": {
            "description": "A unique identifier for the head node and workers of this cluster.",
            "type": "string"
        },
        "workspace_name": {
            "description": "The workspace resource for this cluster.",
            "type": "string"
        },
        "from": {
            "description": "Inherit configurations from another configuration in templates folder.",
            "type": "string"
        },
        "min_workers": {
            "description": "The minimum number of worker nodes to launch. Use the per node_type min_workers field instead.",
            "type": "integer",
            "minimum": 0
        },
        "max_workers": {
            "description": "The maximum number of workers nodes to launch in addition to the head node. This takes precedence over min_workers.",
            "type": "integer",
            "minimum": 0
        },
        "upscaling_speed": {
            "description": "The scaler will scale up the cluster faster with higher upscaling speed. E.g., if the task requires adding more nodes then scaler will gradually scale up the cluster in chunks of upscaling_speed*currently_running_nodes. This number should be > 0.",
            "type": "number",
            "minimum": 0
        },
        "idle_timeout_minutes": {
            "description": "If a node is idle for this many minutes, it will be removed.",
            "type": "number",
            "minimum": 0
        },
        "bootstrapped": {
            "type": "boolean",
            "description": "Mark whether the config file is already bootstrapped or not (Internal use. Don't set)",
            "default": false
        },
        "cloudtik_wheel_url": {
            "type": "string",
            "description": "The CloudTik wheel URL from which to download and install when needed"
        },
        "disable_node_number": {
            "type": "boolean",
            "description": "Whether disable the feature of assigning node number to each node",
            "default": false
        },
        "retry_setup_command": {
            "type": "boolean",
            "description": "Whether to retry setup command if the command failed",
            "default": true
        },
        "number_of_retries": {
            "type": "integer",
            "description": "The number of reties if the command failed"
        },
        "retry_interval": {
            "type": "integer",
            "description": "The time interval in seconds for command retry"
        },
        "provider": {
            "type": "object",
            "description": "Cloud-provider specific configuration.",
            "required": [ "type" ],
            "additionalProperties": true,
            "properties": {
                "type": {
                    "type": "string",
                    "description": "e.g. aws, azure, gcp,..."
                },
                "region": { 
                    "type": "string",
                    "description": "e.g. us-east-1"
                },
                "module": {
                    "type": "string",
                    "description": "module, if using external node provider"
                },
                "use_internal_ips": {
                    "type": "boolean",
                    "description": "don't require public ips"
                },
                "use_working_vpc": {
                    "type": "boolean",
                    "description": "When use_internal_ips is true, whether to use the working client vpc."
                },
                "peering_firewall_allow_working_subnet": {
                    "type": "boolean",
                    "description": "Whether automatically allow working node subnet access to peering network in firewall rules.",
                    "default": true
                },
                "peering_firewall_allow_ssh_only": {
                    "type": "boolean",
                    "description": "Whether allow only the ssh access to peering network in the above firewall rules.",
                    "default": true
                },
                "namespace": {
                    "type": "string",
                    "description": "k8s namespace, if using k8s"
                },
                "location": {
                    "type": "string",
                    "description": "Azure location"
                },
                "resource_group": {
                    "type": "string",
                    "description": "Azure resource group"
                },
                "tags": {
                    "type": "object",
                    "description": "Azure user-defined tags"
                },
                "subscription_id": {
                    "type": "string",
                    "description": "Azure subscription id"
                },
                "msi_identity_id": {
                    "type": "string",
                    "description": "User-defined managed identity (generated by config)"
                },
                "msi_identity_principal_id": {
                    "type": "string",
                    "description": "User-defined managed identity principal id (generated by config)"
                },
                "subnet_id": {
                    "type": "string",
                    "description": "Network subnet id"
                },
                "head_service_account": {
                    "type": "object",
                    "description": "k8s cluster head and controller permissions, if using k8s"
                },
                "head_role": {
                    "type": "object",
                    "description": "k8s cluster head and controller permissions, if using k8s"
                },
                "head_role_binding": {
                    "type": "object",
                    "description": "k8s cluster head and controller permissions, if using k8s"
                },
                "worker_service_account": {
                    "type": "object",
                    "description": "k8s cluster worker permissions, if using k8s"
                },
                "cloud_provider": {
                    "type": "object",
                    "description": "k8s cluster configurations for cloud provider integration.",
                    "required": [ "type" ],
                    "additionalProperties": true,
                    "properties": {
                        "type": {
                            "type": "string",
                            "description": "e.g. aws, azure, gcp,..."
                        },
                        "region": {
                            "type": "string",
                            "description": "e.g. us-east-1"
                        }
                    }
                },
                "cache_stopped_nodes": {
                    "type": "boolean",
                    "description": "Whether to try to reuse previously stopped nodes instead of launching nodes. This will also cause the cluster scaler to stop nodes instead of terminating them. Only implemented for AWS."
                },
                "prefer_spot_node": {
                    "type": "boolean",
                    "description": "Whether to prefer to launch Spot instance to save money at the cost of uncertain termination."
                },
                "availability_zone": {
                    "type": "string",
                    "description": "GCP availability zone"
                },
                "project_id": {
                    "type": ["string", "null"],
                    "description": "GCP globally unique project id"
                },
                "security_group": {
                    "type": "object",
                    "description": "AWS security group",
                    "additionalProperties": false,
                    "properties": {
                      "GroupName": {
                        "type": "string",
                        "description": "Security group name"
                      },
                      "IpPermissions": {
                        "type": "array",
                        "description": "Security group in bound rules"
                      }
                    }
                },
                "disable_node_updaters": {
                    "type": "boolean",
                    "description": "Disables node updaters if set to True. Default is False. (For Kubernetes operator usage.)"
                },
                "aws_credentials": {
                    "type": "object",
                    "description": "Credentials for authenticating with the AWS using boto3. If not specified, will use environment default.",
                    "additionalProperties": true,
                    "properties": {
                        "aws_access_key_id": {
                            "type": "string",
                            "description": "The access key to use when creating the client."
                        },
                        "aws_secret_access_key": {
                            "type": "string",
                            "description": "The secret key to use when creating the client."
                        },
                        "aws_session_token": {
                            "type": "string",
                            "description": "The session token to use when creating the client."
                        }
                    }
                },
                "gcp_credentials": {
                    "type": "object",
                    "description": "Credentials for authenticating with the GCP client. If not specified, will use environment default.",
                    "required": [ "type" ],
                    "additionalProperties": false,
                    "properties": {
                        "type": {
                            "type": "string",
                            "enum": ["oauth_token", "service_account"],
                            "description": "Credentials type: either temporary OAuth 2.0 token or permanent service account credentials blob."
                        },
                        "credentials": {
                            "type": "object",
                            "description": "OAuth token fields or service account credentials fields"
                        }
                    }
                },
                "azure_credentials": {
                    "type": "object",
                    "description": "Credentials for authenticating with the Azure Cloud. If not specified, will use environment default.",
                    "required": [ "type" ],
                    "additionalProperties": false,
                    "properties": {
                        "type": {
                            "type": "string",
                            "enum": ["ClientSecret", "ManagedIdentity"],
                            "description": "Credentials type for credentials information."
                        },
                        "credentials": {
                            "type": "object",
                            "additionalProperties": true,
                            "description": "Credential fields based on different credential types.",
                            "properties": {
                                "client_id": {
                                    "type": "string",
                                    "description": "The client id field for ClientSecret or ManagedIdentity credential."
                                },
                                "tenant_id": {
                                    "type": "string",
                                    "description": "The tenant id field for ClientSecret credential."
                                },
                                "client_secret": {
                                    "type": "string",
                                    "description": "The client secret field for ClientSecret credential."
                                }
                            }
                        }
                    }
                },
                "storage": {
                    "type": "object",
                    "description": "The cloud storage configurations",
                    "additionalProperties": true,
                    "properties": {
                        "gcp_cloud_storage": {
                            "type": "object",
                            "description": "use google cloud storage",
                            "additionalProperties": true,
                            "properties": {
                                "gcs.bucket": {
                                    "type": "string",
                                    "description": "gcp cloud storage bucket name"
                                },
                                "gcs.service.account.client.email": {
                                    "type": "string",
                                    "description": "gcp service account client email"
                                },
                                "gcs.service.account.private.key.id": {
                                    "type": "string",
                                    "description": "gcp service account private key id"
                                },
                                "gcs.service.account.private.key": {
                                    "type": "string",
                                    "description": "gcp service account private key"
                                }
                            }
                        },
                        "azure_cloud_storage": {
                            "type": "object",
                            "description": "Azure cloud storage configurations",
                            "additionalProperties": false,
                            "properties": {
                              "azure.storage.type": {
                                "type": "string",
                                "enum": ["blob", "datalake"],
                                "description": "Azure cloud storage type: blob (Azure Blob Storage) or datalake (Azure Data Lake Storage Gen 2)."
                              },
                              "azure.storage.account": {
                                "type": "string",
                                "description": "azure storage account name"
                              },
                              "azure.container": {
                                "type": "string",
                                "description": "azure container name"
                              },
                              "azure.account.key": {
                                "type": "string",
                                "description": "azure storage account access key"
                              }
                            }
                        },
                        "aws_s3_storage": {
                            "type": "object",
                            "description": "AWS S3 storage configurations",
                            "additionalProperties": false,
                            "properties": {
                              "s3.bucket": {
                                "type": "string",
                                "description": "the s3 bucket name"
                              },
                              "s3.access.key.id": {
                                "type": "string",
                                "description": "access key id of s3"
                              },
                              "s3.secret.access.key": {
                                "type": "string",
                                "description": "secret access key of s3"
                              }
                            }
                        }
                    }
                },
                "verify_cloud_storage": {
                    "type": "boolean",
                    "description": "Whether to verify the cloud storage configurations.",
                    "default": true
                },
                "use_managed_cloud_storage": {
                    "type": "boolean",
                    "description": "Whether to use managed cloud storage of workspace.",
                    "default": true
                },
                "worker_role_for_cloud_storage": {
                    "type": "boolean",
                    "description": "Whether to assign worker with the role to access cloud storage.",
                    "default": true
                }
            }
        },
        "auth": {
            "type": "object",
            "description": "How will authenticate with newly launched nodes.",
            "additionalProperties": false,
            "properties": {
                "ssh_user": {
                    "type": "string",
                    "default": "ubuntu"
                },
                "ssh_port": {
                    "type": "string",
                    "default": "Except that kubernetes is 9999, all others are 22"
                },
                "ssh_public_key": { 
                    "type": "string"
                },
                "ssh_private_key": { 
                    "type": "string"
                },
                "ssh_proxy_command": {
                    "description": "A value for ProxyCommand ssh option, for connecting through proxies. Example: nc -x proxy.example.com:1234 %h %p",
                    "type": "string"
                }
            }
        },
        "docker": {
            "type": "object",
            "description": "Docker configuration. If this is specified, all setup and start commands will be executed in the container.",
            "additionalProperties": false,
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether to run everything in docker container",
                    "default": false
                },
                "image": {
                    "type": "string",
                    "description": "the docker image name",
                    "default": "cloudtik/spark-runtime:nightly"
                },
                "container_name": {
                    "type": "string",
                    "default": "cloudtik_spark_container"
                },
                "pull_before_run": {
                    "type": "boolean",
                    "description": "run `docker pull` first"
                },
                "run_options": {
                    "type": "array",
                    "description": "shared options for starting head/worker docker"
                },
                "head_image": {
                    "type": "string",
                    "description": "image for head node, takes precedence over 'image' if specified"
                },
                "head_run_options": {
                    "type": "array",
                    "description": "head specific run options, appended to run_options"
                },
                "worker_image": {
                    "type": "string",
                    "description": "analogous to head_image"
                },
                "worker_run_options": {
                    "type": "array",
                    "description": "analogous to head_run_options"
                }, 
                "disable_automatic_runtime_detection" : {
                    "type": "boolean",
                    "description": "disable automatically using the NVIDIA runtime if available",
                    "default": false
                },
                "disable_shm_size_detection" : {
                    "type": "boolean",
                    "description": "disable automatically detecting /dev/shm size for the container",
                    "default": false
                },
                "use_podman"  :  {
                    "type": "boolean",
                    "description": "Use 'podman' command in place of 'docker'",
                    "default": false
                },
                "initialization_commands": {
                    "$ref": "#/definitions/commands",
                    "description": "List of commands that will be run before `setup_commands` on host for docker only"
                },
                "head_initialization_commands": {
                    "$ref": "#/definitions/commands",
                    "description": "List of commands that will be run before `setup_commands` on host for docker only"
                },
                "worker_initialization_commands": {
                    "$ref": "#/definitions/commands",
                    "description": "List of commands that will be run before `setup_commands` on host for docker only"
                }
            }
        },
        "head_node_type": {
            "type": "string",
            "description": "If using multiple node types, specifies the head node type."
        },
        "head_node": {
            "type": "object",
            "description": "Provider-specific config for the head node, e.g. instance type."
        },
        "file_mounts": {
            "type": "object",
            "description": "Map of remote paths to local paths, e.g. {\"/tmp/data\": \"/my/local/data\"}"
        },
        "cluster_synced_files": {
            "type": "array",
            "description": "List of paths on the head node which should sync to the worker nodes, e.g. [\"/some/data/somehwere\"]"
        },
        "file_mounts_sync_continuously": {
            "type": "boolean",
            "description": "If enabled, file mounts will sync continously between the head node and the worker nodes. The nodes will not re-run setup commands if only the contents of the file mounts folders change."
        },
        "rsync_exclude": {
            "type": "array",
            "description": "File pattern to not sync up or down when using the rsync command. Matches the format of rsync's --exclude param."
        },
        "rsync_filter": {
            "type": "array",
            "description": "Pattern files to lookup patterns to exclude when using rsync up or rsync down. This file is checked for recursively in all directories. For example, if .gitignore is provided here, the behavior will match git's .gitignore behavior."
        },
        "metadata": {
            "type": "object",
            "description": "Metadata field that can be used to store user-defined data in the cluster config. We do not interpret these fields."
        },
        "initialization_commands": {
            "$ref": "#/definitions/commands",
            "description": "List of commands that will be run before `setup_commands`. If docker is enabled, these commands will run outside the container and before docker is setup."
        },
        "head_initialization_commands": {
            "$ref": "#/definitions/commands",
            "description": "List of commands that will be run before `setup_commands`. If docker is enabled, these commands will run outside the container and before docker is setup."
        },
        "worker_initialization_commands": {
            "$ref": "#/definitions/commands",
            "description": "List of commands that will be run before `setup_commands`. If docker is enabled, these commands will run outside the container and before docker is setup."
        },
        "setup_commands": {
            "$ref": "#/definitions/commands",
            "description": "List of common commands to run to setup nodes."
        },
        "head_setup_commands": {
            "$ref": "#/definitions/commands",
            "description": "Commands that will be run on the head node after common setup."
        },
        "worker_setup_commands": {
            "$ref": "#/definitions/commands",
            "description": "Commands that will be run on worker nodes after common setup."
        },
        "bootstrap_commands": {
            "$ref": "#/definitions/commands",
            "description": "Common setup commands running after all the setup commands."
        },
        "start_commands": {
            "$ref": "#/definitions/commands",
            "description": "Common start commands for nodes."
        },
        "head_start_commands": {
            "$ref": "#/definitions/commands",
            "description": "Command to start on the head node."
        },
        "worker_start_commands": {
            "$ref": "#/definitions/commands",
            "description": "Command to start on worker nodes."
        },
        "stop_commands": {
            "$ref": "#/definitions/commands",
            "description": "Common stop commands for nodes."
        },
        "head_stop_commands": {
            "$ref": "#/definitions/commands",
            "description": "Command to stop on the head node."
        },
        "worker_stop_commands": {
            "$ref": "#/definitions/commands",
            "description": "Command to stop on worker nodes."
        },
        "no_restart": {
            "description": "Whether to avoid restarting the cluster during updates. This field is controlled by the cloudtik --no-restart flag and cannot be set by the user."
        },
        "merged_commands": {
            "type": "object",
            "description": "The merged commands used internally. Don't override."
        },
        "no_controller_on_head": {
            "type": "boolean",
            "description": "Whether need to run controller on head. Internal flag, don't override."
        },
        "available_node_types": {
            "type": "object",
            "description": "A list of node types for multi-node-type autoscaling.",
            "patternProperties": {
                ".*": {
                    "type": "object",
                    "required": [ "node_config" ],
                    "properties": {
                        "node_config": {
                            "type": "object",
                            "description": "Provider-specific config for the node, e.g. instance type."
                        },
                        "min_workers": {"type": "integer"},
                        "max_workers": {"type": "integer"},
                        "resources": {
                            "type": "object",
                            "patternProperties": {
                                ".*":{
                                    "type": "integer",
                                    "minimum": 0
                                }
                            }
                        },
                        "worker_initialization_commands": {
                            "$ref": "#/definitions/commands",
                            "description": "List of commands that will be run before `setup_commands`. If docker is enabled, these commands will run outside the container and before docker is setup."
                        },
                        "worker_setup_commands": {
                            "$ref": "#/definitions/commands",
                            "description": "List of common commands to run to setup on this specific node type."
                        },
                        "bootstrap_commands": {
                            "$ref": "#/definitions/commands",
                            "description": "Common setup commands running after all the setup commands on this specific node type."
                        },
                        "worker_start_commands": {
                            "$ref": "#/definitions/commands",
                            "description": "Command to start on this specific node type."
                        },
                        "worker_stop_commands": {
                            "$ref": "#/definitions/commands",
                            "description": "Command to stop on this specific node type."
                        },
                        "merged_commands": {
                            "type": "object",
                            "description": "The merged commands used internally. Don't override."
                        },
                        "runtime": {
                            "type": "object",
                            "description": "Set the configurations for runtime components",
                            "additionalProperties": true,
                            "properties": {
                                "types": {
                                    "type": "array",
                                    "items": {
                                        "type": "string"
                                    },
                                    "description": "The list of runtimes to enable for this cluster"
                                },
                                "envs": {
                                    "type": "object",
                                    "patternProperties": {
                                        ".*":{
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        },
                        "docker": {
                            "description": "Configuration of Worker nodes.",
                            "type": "object",
                            "properties": {
                                "pull_before_run": {
                                    "type": "boolean",
                                    "description": "run `docker pull` first"
                                },
                                "worker_image": {
                                    "type": "string",
                                    "description": "analogous to head_image"
                                },
                                "worker_run_options": {
                                    "type": "array",
                                    "description": "analogous to head_run_options, merged with the global docker run_options."
                                }
                            },
                            "additionalProperties": false
                        }
                    },
                    "additionalProperties": false
                }
            },
            "additionalProperties": false
        },
        "runtime": {
            "type": "object",
            "description": "Set the configurations for runtime components",
            "additionalProperties": true,
            "properties": {
                "types": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of runtimes to enable for this cluster"
                },
                "envs": {
                    "type": "object",
                    "patternProperties": {
                        ".*":{
                            "type": "string"
                        }
                    }
                },
                "scaling:": {
                    "type": "object",
                    "description": "User scaling configurations",
                    "additionalProperties": true,
                    "properties": {
                        "scaling_policy_class": {
                            "type": "string",
                            "description": "The module and class path of the scaling policy class"
                        }
                    }
                },
                "spark": {
                    "type": "object",
                    "description": "Spark runtime related configurations",
                    "additionalProperties": true,
                    "properties": {
                        "config": {
                            "type": "object",
                            "description": "Map of spark configurations, e.g. {\"spark.executor.cores\": \"45\"}"
                        },
                        "spark_executor_resource": {
                            "type": "object",
                            "description": "The resource of one executor. Internal use, don't override",
                            "additionalProperties": false,
                            "properties": {
                                "spark_executor_cores": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "spark_executor_memory": {
                                    "type": "integer",
                                    "default": 512
                                },
                                "spark_driver_memory": {
                                    "type": "integer",
                                    "default": 512
                                }
                            }
                        },
                        "yarn_container_resource": {
                            "type": "object",
                            "description": "The max resource of one container. Internal use, don't override",
                            "additionalProperties": false,
                            "properties": {
                                "yarn_container_maximum_vcores": {
                                    "type": "integer",
                                    "default": 1
                                },
                                "yarn_container_maximum_memory": {
                                    "type": "integer",
                                    "default": 1024
                                }
                            }
                        },
                        "hdfs_namenode_uri": {
                            "type": "string",
                            "description": "HDFS service endpoint if Spark need to access HDFS."
                        },
                        "hive_metastore_uri": {
                            "type": "string",
                            "description": "Metastore service endpoint for Spark to use."
                        },
                        "yarn_resource_memory_ratio": {
                            "type": "number",
                            "description": "The yarn node virtual memory ratio vs the available physical memory."
                        },
                        "yarn_scheduler": {
                            "type": "string",
                            "description": "The yarn scheduler to use: capacity or fair"
                        }
                    }
                },
                "kafka": {
                    "type": "object",
                    "description": "Kafka runtime related configurations",
                    "additionalProperties": true,
                    "properties": {
                        "config": {
                            "type": "object",
                            "description": "Map of Kafka server properties."
                        },
                        "zookeeper_connect": {
                            "type": "string",
                            "description": "Zookeeper servers to use for Kafka."
                        }
                    }
                },
                "zookeeper": {
                    "type": "object",
                    "description": "Zookeeper runtime related configurations",
                    "additionalProperties": true,
                    "properties": {
                        "config": {
                            "type": "object",
                            "description": "Map of Zookeeper server properties."
                        }
                    }
                },
                "presto": {
                    "type": "object",
                    "description": "Presto runtime related configurations",
                    "additionalProperties": true,
                    "properties": {
                        "config": {
                            "type": "object",
                            "description": "Map of Presto server properties."
                        },
                        "catalogs": {
                            "type": "object",
                            "description": "Presto catalogs to be configured."
                        },
                        "hive_metastore_uri": {
                            "type": "string",
                            "description": "Metastore service endpoint for Presto to use."
                        }
                    }
                }
            }
        }
    }
}

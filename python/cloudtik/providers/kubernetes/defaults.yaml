# Include the common defaults
from: defaults

# This executes all commands on all nodes in the docker container,
# and opens all the necessary ports to support the cluster.
# Turn on or off container by set enabled to True or False.
docker:
    enabled: False

auth:
    ssh_user: cloudtik

provider:
    type: kubernetes

    # For Kubernetes, we usually use internal ips for all the pods
    use_internal_ips: true

    # Namespace to use for all resources created.
    namespace: cloudtik

    # ServiceAccount created for the head node pod that it
    # runs in. If this field isn't provided, the head pod config below must
    # contain a user-created service account with the proper permissions.
    head_service_account:
        apiVersion: v1
        kind: ServiceAccount
        metadata:
            name: cloudtik-head-service-account

    # Role created for the head node pod that it runs in.
    # If this field isn't provided, the role referenced in
    # head_role_binding must exist and have at least these permissions.
    head_role:
        kind: Role
        apiVersion: rbac.authorization.k8s.io/v1
        metadata:
            name: cloudtik-head-role
        rules:
        - apiGroups: [""]
          resources: ["pods", "pods/status", "pods/exec", "services", "persistentvolumeclaims", "configmaps"]
          verbs: ["get", "watch", "list", "create", "delete", "patch"]

    # RoleBinding created for the head node pod that it runs
    # in. If this field isn't provided, the head pod config below must contain
    # a user-created service account with the proper permissions.
    head_role_binding:
        apiVersion: rbac.authorization.k8s.io/v1
        kind: RoleBinding
        metadata:
            name: cloudtik-role-binding
        subjects:
        - kind: ServiceAccount
          name: cloudtik-head-service-account
        roleRef:
            kind: Role
            name: cloudtik-head-role
            apiGroup: rbac.authorization.k8s.io

    # ServiceAccount created for the worker node pod that it runs in.
    worker_service_account:
        apiVersion: v1
        kind: ServiceAccount
        metadata:
          name: cloudtik-worker-service-account

    head_external_service:
        # Service that maps to the head node of the cluster.
        apiVersion: v1
        kind: Service
        metadata:
            name: cloudtik-{}-external
        spec:
            type: LoadBalancer
            # This selector must match the head node pod's selector below.
            selector:
                component: cloudtik-{}-head

    head_service:
        # Service that maps to the head node of the cluster.
        apiVersion: v1
        kind: Service
        metadata:
            # NOTE: If you're running multiple clusters with services
            # on one Kubernetes cluster, they must have unique service
            # names.
            name: cloudtik-{}-head
        spec:
            # This selector must match the head node pod's selector below.
            selector:
                component: cloudtik-{}-head
            ports:
              - name: cloudtik-redis-service-port
                protocol: TCP
                port: 6789
                targetPort: cloudtik-redis
    node_service:
        # Service that maps to all the nodes of the cluster for dns name resolving
        apiVersion: v1
        kind: Service
        metadata:
            # The node service with the name of cluster-name
            name: {cluster-name}
        spec:
            # This selector must match the all the node pod's selector below.
            selector:
              cluster: cloudtik-{}
            clusterIP: None

# Specify the allowed pod types for this cluster and the resources they provide.
available_node_types:
    worker.default:
        # Minimum number of workers of this Pod type.
        min_workers: 1
        node_config:
            pod:
                apiVersion: v1
                kind: Pod
                metadata:
                    # Automatically generates a name for the pod with this prefix.
                    generateName: cloudtik-{}-worker-
                    labels:
                        cluster: cloudtik-{}
                        component: cloudtik-{}-worker
                spec:
                    hostname: worker-{}
                    subdomain: {cluster-name}
                    restartPolicy: Never
                    # Allow non-root user to access PersistentVolume
                    securityContext:
                        fsGroup: 100
                    containers:
                      - name: cloudtik-node
                        imagePullPolicy: Always
                        command: ["/bin/bash", "-c", "--"]
                        args: ["trap : TERM INT; sleep infinity & wait;"]
                        resources:
                            requests:
                                cpu: 4
                                memory: 8Gi
                            limits:
                                # The maximum memory that this pod is allowed to use.
                                memory: 8Gi
    head.default:
        node_config:
            pod:
                apiVersion: v1
                kind: Pod
                metadata:
                    # Automatically generates a name for the pod with this prefix.
                    generateName: cloudtik-{}-head-
                    # Must match the head node service selector above if a head node
                    # service is required.
                    labels:
                        cluster: cloudtik-{}
                        component: cloudtik-{}-head
                spec:
                    hostname: head-{}
                    subdomain: {cluster-name}
                    restartPolicy: Never
                    # Allow non-root user to access PersistentVolume
                    securityContext:
                        fsGroup: 100
                    containers:
                      - name: cloudtik-node
                        imagePullPolicy: Always
                        # Do not change this command - it keeps the pod alive until it is
                        # explicitly killed.
                        command: ["/bin/bash", "-c", "--"]
                        args: ['trap : TERM INT; sleep infinity & wait;']
                        ports:
                          - containerPort: 6789  # Redis port
                            name: cloudtik-redis
                        resources:
                            requests:
                                cpu: 4
                                memory: 8Gi
                            limits:
                                # The maximum memory that this pod is allowed to use.
                                memory: 8Gi

# Specify the pod type for the head node (as configured below).
head_node_type: head.default

From aee7d0bbd587897b5b0c9f7aba25365c3b703b50 Mon Sep 17 00:00:00 2001
From: Chen Haifeng <haifeng.chen@intel.com>
Date: Fri, 31 Mar 2023 17:40:27 +0800
Subject: [PATCH] CloudTik Horovod Integration

---
 horovod/runner/driver/driver_service.py |  7 +++++
 horovod/runner/gloo_run.py              |  5 ++--
 horovod/runner/mpi_run.py               | 20 +++++++++++++
 horovod/runner/util/remote.py           | 12 +++++++-
 horovod/spark/gloo_run.py               | 17 +++++++++--
 horovod/spark/mpi_run.py                | 39 +++++++++++++++++++------
 horovod/spark/task/mpirun_exec_fn.py    | 19 +++++++++++-
 7 files changed, 104 insertions(+), 15 deletions(-)

diff --git a/horovod/runner/driver/driver_service.py b/horovod/runner/driver/driver_service.py
index b353006..fbd93bc 100644
--- a/horovod/runner/driver/driver_service.py
+++ b/horovod/runner/driver/driver_service.py
@@ -251,6 +251,13 @@ def get_common_interfaces(settings, all_host_names, remote_host_names=None, fn_c
             local_host_names = set(all_host_names) - set(remote_host_names)
             nics = _driver_fn(all_host_names, local_host_names, settings, fn_cache=fn_cache)
 
+            # CloudTik: patch start
+            # We cannot use loopback for server ip. Remove loopback.
+            if len(nics) > 1 and "lo" in nics:
+                print('Removing loopback interface: lo')
+                nics.remove("lo")
+            # CloudTik: patch end
+
             if settings.verbose >= 2:
                 print('Interfaces on all the hosts were successfully checked.')
                 print('Common interface found: ' + ' '.join(nics))
diff --git a/horovod/runner/gloo_run.py b/horovod/runner/gloo_run.py
index 904ec35..9f6e977 100644
--- a/horovod/runner/gloo_run.py
+++ b/horovod/runner/gloo_run.py
@@ -143,8 +143,9 @@ def _exec_command_fn(settings):
         host_address = network.resolve_host_address(host_name)
         local_addresses = network.get_local_host_addresses()
         if host_address not in local_addresses:
-            local_command = quote('cd {pwd} > /dev/null 2>&1 ; {command}'
-                                  .format(pwd=os.getcwd(), command=command))
+            # CloudTik: patch start
+            local_command = 'cd {pwd} > /dev/null 2>&1 ; {command}'.format(pwd=os.getcwd(), command=command)
+            # CloudTik: patch end
             command = get_remote_command(local_command,
                                          host=host_name,
                                          port=settings.ssh_port,
diff --git a/horovod/runner/mpi_run.py b/horovod/runner/mpi_run.py
index 5bcce0b..c7a1165 100644
--- a/horovod/runner/mpi_run.py
+++ b/horovod/runner/mpi_run.py
@@ -207,6 +207,26 @@ def mpi_run(settings, nics, env, command, stdout=None, stderr=None):
     env_list = '' if impi_or_mpich else ' '.join(
                     '-x %s' % key for key in sorted(env.keys()) if env_util.is_exportable(key))
 
+    # CloudTik: patch start
+    def get_cloudtik_rsh():
+        cloudtik_home = os.path.join(
+            os.path.dirname(os.path.dirname(os.path.dirname(__file__))), 'cloudtik')
+        return os.path.join(cloudtik_home, "runtime/ai/scripts", "cloudtik-rsh.sh")
+
+    if not impi_or_mpich:
+        if not settings.extra_mpi_args or "-mca plm_rsh_agent" not in settings.extra_mpi_args:
+            settings.extra_mpi_args = (
+                '{extra_mpi_args} -mca plm_rsh_agent "{rsh_agent}"'
+                .format(extra_mpi_args=settings.extra_mpi_args if settings.extra_mpi_args else '',
+                        rsh_agent=get_cloudtik_rsh()))
+    else:
+        if not settings.extra_mpi_args or "--launcher-exec" not in settings.extra_mpi_args:
+            settings.extra_mpi_args = (
+                '{extra_mpi_args} --launcher rsh --launcher-exec "{launcher_exec}"'
+                .format(extra_mpi_args=settings.extra_mpi_args if settings.extra_mpi_args else '',
+                        launcher_exec=get_cloudtik_rsh()))
+    # CloudTik: patch end
+
     # Pass all the env variables to the mpirun command.
     mpirun_command = (
         'mpirun {basic_args} '
diff --git a/horovod/runner/util/remote.py b/horovod/runner/util/remote.py
index dfbfab3..aed6e6f 100644
--- a/horovod/runner/util/remote.py
+++ b/horovod/runner/util/remote.py
@@ -14,8 +14,11 @@
 # ==============================================================================
 
 from horovod.runner.common.util import env as env_util
+# CloudTik: patch start
+from shlex import quote
 
 SSH_COMMAND_PREFIX = 'ssh -o PasswordAuthentication=no -o StrictHostKeyChecking=no'
+CLOUDTIK_COMMAND_PREFIX = 'cloudtik head exec'
 
 
 def get_ssh_command(local_command, host, port=None, identity_file=None, timeout_s=None):
@@ -25,6 +28,13 @@ def get_ssh_command(local_command, host, port=None, identity_file=None, timeout_
     return f'{SSH_COMMAND_PREFIX} {host} {port_arg} {identity_file_arg} {timeout_arg} {local_command}'
 
 
+def get_cloudtik_ssh_command(local_command, host, port=None, identity_file=None, timeout_s=None):
+    final_command = quote(local_command)
+    return f'{CLOUDTIK_COMMAND_PREFIX} {final_command} --node-ip={host}'
+
+
 def get_remote_command(local_command, host, port=None, identity_file=None, timeout_s=None):
     return f'{env_util.KUBEFLOW_MPI_EXEC} {host} {local_command}' if env_util.is_kubeflow_mpi() \
-        else get_ssh_command(local_command, host, port, identity_file, timeout_s)
+        else get_cloudtik_ssh_command(local_command, host, port, identity_file, timeout_s)
+
+# CloudTik: patch end
diff --git a/horovod/spark/gloo_run.py b/horovod/spark/gloo_run.py
index dd6f2fd..df10e05 100644
--- a/horovod/spark/gloo_run.py
+++ b/horovod/spark/gloo_run.py
@@ -15,6 +15,9 @@
 
 import sys
 import time
+# CloudTik: patch start
+import os
+# CloudTik: patch end
 
 from horovod.runner.common.util import codec, secret
 from horovod.runner.gloo_run import launch_gloo, launch_gloo_elastic
@@ -46,8 +49,16 @@ def gloo_run(executable, settings, nics, driver, env, stdout=None, stderr=None):
     :param stdout: Horovod stdout is redirected to this stream.
     :param stderr: Horovod stderr is redirected to this stream.
     """
+    # CloudTik: patch start
     if env is None:
-        env = {}
+        env = os.environ.copy()
+    # CloudTik: patch end
+
+    # CloudTik: patch start
+    # We cannot use loopback for server ip. Remove loopback.
+    if len(nics) > 1 and "lo" in nics:
+        nics.remove("lo")
+    # CloudTik: patch end
 
     # we don't want the key to be serialized along with settings from here on
     key = settings.key
@@ -79,8 +90,10 @@ def gloo_run_elastic(settings, driver, env, stdout=None, stderr=None):
     :param stdout: Horovod stdout is redirected to this stream.
     :param stderr: Horovod stderr is redirected to this stream.
     """
+    # CloudTik: patch start
     if env is None:
-        env = {}
+        env = os.environ.copy()
+    # CloudTik: patch end
 
     # Each thread will use SparkTaskClient to launch the job on each remote host. If an
     # error occurs in one thread, entire process will be terminated. Otherwise,
diff --git a/horovod/spark/mpi_run.py b/horovod/spark/mpi_run.py
index 9ab1fa3..aeff9ca 100644
--- a/horovod/spark/mpi_run.py
+++ b/horovod/spark/mpi_run.py
@@ -15,8 +15,11 @@
 
 import copy
 import sys
+# CloudTik: patch start
+import os
+# CloudTik: patch end
 
-from horovod.runner.mpi_run import mpi_run as hr_mpi_run
+from horovod.runner.mpi_run import mpi_run as hr_mpi_run, is_intel_mpi, is_mpich
 from horovod.runner.common.util import codec, secret
 
 
@@ -35,20 +38,38 @@ def mpi_run(executable, settings, nics, driver, env, stdout=None, stderr=None):
     :param stderr: Stderr of the mpi process.
                    Only used when settings.run_func_mode is True.
     """
-    env = {} if env is None else copy.copy(env)  # copy env so we do not leak env modifications
+    # CloudTik: patch start
+    # If there is no env specified, copy the os environment
+    env = os.environ.copy() if env is None else copy.copy(env)  # copy env so we do not leak env modifications
+    # CloudTik: patch end
 
     # Pass secret key through the environment variables.
     env[secret.HOROVOD_SECRET_KEY] = codec.dumps_base64(settings.key)
     # we don't want the key to be serialized along with settings from here on
     settings.key = None
 
-    rsh_agent = (executable,
-                 '-m', 'horovod.spark.driver.mpirun_rsh',
-                 codec.dumps_base64(driver.addresses()),
-                 codec.dumps_base64(settings))
-    settings.extra_mpi_args = ('{extra_mpi_args} -x NCCL_DEBUG=INFO -mca plm_rsh_agent "{rsh_agent}"'
-                               .format(extra_mpi_args=settings.extra_mpi_args if settings.extra_mpi_args else '',
-                                       rsh_agent=' '.join(rsh_agent)))
+    # CloudTik: patch start
+    impi_or_mpich = is_intel_mpi(env=env) or is_mpich(env=env)
+
+    if not impi_or_mpich:
+        rsh_agent = (executable,
+                     '-m', 'horovod.spark.driver.mpirun_rsh',
+                     codec.dumps_base64(driver.addresses()),
+                     codec.dumps_base64(settings))
+        settings.extra_mpi_args = ('{extra_mpi_args} -x NCCL_DEBUG=INFO -mca plm_rsh_agent "{rsh_agent}"'
+                                   .format(extra_mpi_args=settings.extra_mpi_args if settings.extra_mpi_args else '',
+                                           rsh_agent=' '.join(rsh_agent)))
+    else:
+        launcher_args = ('-m', 'horovod.spark.driver.mpirun_rsh',
+                         codec.dumps_base64(driver.addresses()),
+                         codec.dumps_base64(settings))
+        extra_mpi_args_template = \
+            '{extra_mpi_args} --launcher rsh --launcher-exec "{launcher_exec}" -bootstrap-exec-args "{launcher_args}"'
+        settings.extra_mpi_args = (extra_mpi_args_template
+                                   .format(extra_mpi_args=settings.extra_mpi_args if settings.extra_mpi_args else '',
+                                           launcher_exec=executable, launcher_args=' '.join(launcher_args)))
+    # CloudTik: patch end
+
     command = (executable,
                '-m', 'horovod.spark.task.mpirun_exec_fn',
                codec.dumps_base64(driver.addresses()),
diff --git a/horovod/spark/task/mpirun_exec_fn.py b/horovod/spark/task/mpirun_exec_fn.py
index be0313b..e7b3f8c 100644
--- a/horovod/spark/task/mpirun_exec_fn.py
+++ b/horovod/spark/task/mpirun_exec_fn.py
@@ -42,7 +42,24 @@ def main(driver_addresses, settings):
             print("Changing cwd from {} to {}".format(os.getcwd(), work_dir))
         os.chdir(work_dir)
 
-    task_exec(driver_addresses, settings, 'OMPI_COMM_WORLD_RANK', 'OMPI_COMM_WORLD_LOCAL_RANK')
+    # CloudTik: patch start
+    def get_valid_env(env_list):
+        for var in env_list:
+            var_value = os.environ.get(var)
+            if var_value is not None:
+                return var
+
+        raise RuntimeError(
+            'Could not determine process env from: {}'
+            'None found in environment'.format(env_list))
+
+    rank_env_list = ['HOROVOD_RANK', 'OMPI_COMM_WORLD_RANK', 'PMI_RANK']
+    local_rank_env_list = ['HOROVOD_LOCAL_RANK', 'OMPI_COMM_WORLD_LOCAL_RANK', 'MPI_LOCALRANKID']
+    rank_env = get_valid_env(rank_env_list)
+    local_rank_env = get_valid_env(local_rank_env_list)
+
+    task_exec(driver_addresses, settings, rank_env, local_rank_env)
+    # CloudTik: patch end
 
 
 if __name__ == '__main__':
-- 
2.39.1.windows.1

